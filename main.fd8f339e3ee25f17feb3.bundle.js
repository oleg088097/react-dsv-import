(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{1246:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),function(module){var _storybook_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(451);module._StorybookPreserveDecorators=!0,Object(_storybook_react__WEBPACK_IMPORTED_MODULE_0__.configure)([__webpack_require__(1270),__webpack_require__(1273)],module)}.call(this,__webpack_require__(1247)(module))},1270:function(module,exports,__webpack_require__){var map={"./start.stories.mdx":1293};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1270},1273:function(module,exports,__webpack_require__){var map={"./DSVImport.stories.tsx":1290};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id=1273},1290:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"BasicUsage",(function(){return BasicUsage})),__webpack_require__.d(__webpack_exports__,"UsingOnChangeCallback",(function(){return UsingOnChangeCallback})),__webpack_require__.d(__webpack_exports__,"UsingOnValidationCallback",(function(){return UsingOnValidationCallback}));var contextSingleton,slicedToArray=__webpack_require__(74),defineProperty=__webpack_require__(195),react=__webpack_require__(0),react_default=__webpack_require__.n(react),objectSpread2=__webpack_require__(101),emptyState={columns:[]},createReducer=function(){return function(state,action){return function(state,action){switch(action.type){case"setRaw":return Object(objectSpread2.a)(Object(objectSpread2.a)({},state),{},{raw:action.raw});case"setParsed":return Object(objectSpread2.a)(Object(objectSpread2.a)({},state),{},{parsed:action.parsed});case"setValidation":return Object(objectSpread2.a)(Object(objectSpread2.a)({},state),{},{validation:action.errors});default:return state}}(state,action)}},getDSVImportContext=function(){return contextSingleton||(contextSingleton=Object(react.createContext)([emptyState,function(){throw new Error("Not initialized")}])),contextSingleton},useDSVImport=function(){return Object(react.useContext)(getDSVImportContext())},TextareaInput=function(){var _useDSVImport=useDSVImport(),dispatch=Object(slicedToArray.a)(_useDSVImport,2)[1];return react_default.a.createElement("textarea",{onChange:function(event){dispatch({type:"setRaw",raw:event.target.value})}})};TextareaInput.__docgenInfo={description:"",methods:[],displayName:"TextareaInput"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/inputs/TextareaInput.tsx"]={name:"TextareaInput",docgenInfo:TextareaInput.__docgenInfo,path:"src/components/inputs/TextareaInput.tsx"});__webpack_require__(9);var TablePreview=function(){var _useDSVImport=useDSVImport(),context=Object(slicedToArray.a)(_useDSVImport,1)[0];return react_default.a.createElement("table",null,react_default.a.createElement("thead",null,react_default.a.createElement("tr",null,context.columns.map((function(column,columnIndex){return react_default.a.createElement("th",{key:columnIndex},column.label)})))),react_default.a.createElement("tbody",null,context.parsed?context.parsed.map((function(row,rowIndex){return react_default.a.createElement("tr",{key:rowIndex},context.columns.map((function(column,columnIndex){return react_default.a.createElement("td",{key:columnIndex},row[column.key])})))})):null))};TablePreview.__docgenInfo={description:"",methods:[],displayName:"TablePreview"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/previews/TablePreview.tsx"]={name:"TablePreview",docgenInfo:TablePreview.__docgenInfo,path:"src/components/previews/TablePreview.tsx"});var Delimiter;__webpack_require__(29),__webpack_require__(161),__webpack_require__(1276),__webpack_require__(23),__webpack_require__(32),__webpack_require__(94),__webpack_require__(86),__webpack_require__(33);!function(Delimiter){Delimiter.COMMA=",",Delimiter.SEMICOLON=";",Delimiter.TAB="\t"}(Delimiter||(Delimiter={}));var createParserMiddleware=function(){return function(state,next,action){if("setRaw"===action.type){var delimiter=(value=action.raw,defaultDelimiter=Delimiter.COMMA,currentDelimiter=defaultDelimiter,maximumScore=0,Object.values(Delimiter).forEach((function(s){var currentScore=(value.match(new RegExp(s,"g"))||[]).length;maximumScore<currentScore&&(currentDelimiter=s,maximumScore=currentScore)})),currentDelimiter),parsed=[];""!==action.raw&&(parsed=function(value,columns,delimiter){return value.split("\n").map((function(line){var lineValues=line.split(delimiter),parsedLine={};return columns.forEach((function(column,columnIndex){parsedLine[column.key]=lineValues[columnIndex]})),parsedLine}))}(action.raw,state.columns,delimiter)),next({type:"setParsed",parsed:parsed})}var value,defaultDelimiter,currentDelimiter,maximumScore}},applyMiddlewares=(__webpack_require__(42),function(state,dispatch){for(var _len=arguments.length,middlewares=Array(2<_len?_len-2:0),_key=2;_key<_len;_key++)middlewares[_key-2]=arguments[_key];return function(action){var without=function(i){return middlewares.filter((function(_,filterIndex){return i!==filterIndex}))};middlewares.forEach((function(m,i){return m(state,function next(nextMiddlewares){return function(value){dispatch(value),nextMiddlewares.forEach((function(m,i){m(state,next(without(i)),value)}))}}(without(i)),action)}))}}),validateColumn=(__webpack_require__(21),__webpack_require__(15),__webpack_require__(60),__webpack_require__(35),__webpack_require__(12),__webpack_require__(351),__webpack_require__(16),__webpack_require__(17),function(key,data,rules){var errors=[];if(rules){var values=data.map((function(d){return new String(d).toString()}));return rules.forEach((function(r){if(r.constraint.unique&&!function(data){return new Set(data).size===data.length}(values))errors.push({column:key,message:r.message});else if("function"==typeof r.constraint.callback){var callback=r.constraint.callback;values.forEach((function(v,i){callback(v)||errors.push({column:key,row:i,message:r.message})}))}})),errors}return errors}),EventListener=function(props){var _useDSVImport=useDSVImport(),context=Object(slicedToArray.a)(_useDSVImport,1)[0];return Object(react.useEffect)((function(){context.parsed&&props.onChange&&props.onChange(context.parsed)}),[context.parsed]),Object(react.useEffect)((function(){context.validation&&props.onValidation&&props.onValidation(context.validation)}),[context.validation]),null},DSVImport=function(props){var DSVImportContext=getDSVImportContext(),initialValues={columns:props.columns},_useReducer=Object(react.useReducer)(createReducer(),initialValues),_useReducer2=Object(slicedToArray.a)(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1],enhancedDispatch=applyMiddlewares(state,dispatch,createParserMiddleware(),(function(state,next,action){"setParsed"===action.type&&next({type:"setValidation",errors:state.columns.reduce((function(acc,c){return acc.concat(validateColumn(c.key,action.parsed.map((function(r){return r[c.key]})),c.rules))}),[])})}));return react_default.a.createElement(DSVImportContext.Provider,{value:[state,enhancedDispatch]},react_default.a.createElement(EventListener,{onChange:props.onChange,onValidation:props.onValidation}),props.children)};DSVImport.__docgenInfo={description:"",methods:[],displayName:"DSVImport"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/DSVImport.tsx"]={name:"DSVImport",docgenInfo:DSVImport.__docgenInfo,path:"src/DSVImport.tsx"});__webpack_require__(435);function src_DSVImport(props){return DSVImport(props)}src_DSVImport.TextareaInput=TextareaInput,src_DSVImport.TablePreview=TablePreview;var dist=__webpack_require__(144),addSourceDecorator=(__webpack_require__(187).withSource,__webpack_require__(187).addSource),__SOURCE_PREFIX__=(__webpack_require__(187).withSource,addSourceDecorator=__webpack_require__(187).addSource,"/home/travis/build/openscript/react-dsv-import/src"),__STORY__="import React, { useState } from 'react';\nimport { DSVImport, ColumnsType } from './';\nimport { action } from '@storybook/addon-actions';\n\nexport default { title: 'Usage' };\n\ntype BasicType = { forename: string; surname: string; email: string };\n\nexport const BasicUsage = () => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email' }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n\n  return (\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction}>\n      <DSVImport.TextareaInput />\n      <DSVImport.TablePreview />\n    </DSVImport>\n  );\n};\nBasicUsage.story = { name: 'Basic usage' };\n\nexport const UsingOnChangeCallback = () => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email' }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n  const [state, setState] = useState<BasicType[]>([]);\n\n  const handleOnChange = (value: BasicType[]) => {\n    onChangeAction(value);\n    setState(value);\n  };\n\n  return (\n    <>\n      <DSVImport<BasicType> columns={columns} onChange={handleOnChange}>\n        <DSVImport.TextareaInput />\n        <DSVImport.TablePreview />\n      </DSVImport>\n      <h2>Current state as JSON:</h2>\n      {JSON.stringify(state)}\n    </>\n  );\n};\nUsingOnChangeCallback.story = { name: 'Using on change callback' };\n\nexport const UsingOnValidationCallback = () => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email', rules: [{ constraint: { unique: true }, message: 'Duplicates are not allowed' }] }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n  const onValidationAction = action('Validation value has changed');\n\n  return (\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction} onValidation={onValidationAction}>\n      <DSVImport.TextareaInput />\n      <DSVImport.TablePreview />\n    </DSVImport>\n  );\n};\nUsingOnValidationCallback.story = { name: 'Using on validation callback' };\n",__ADDS_MAP__={"usage--basic-usage":{startLoc:{col:26,line:9},endLoc:{col:1,line:23},startBody:{col:26,line:9},endBody:{col:1,line:23}},"usage--using-on-change-callback":{startLoc:{col:37,line:26},endLoc:{col:1,line:50},startBody:{col:37,line:26},endBody:{col:1,line:50}},"usage--using-on-validation-callback":{startLoc:{col:41,line:53},endLoc:{col:1,line:68},startBody:{col:41,line:53},endBody:{col:1,line:68}}},__MODULE_DEPENDENCIES__=[],__LOCAL_DEPENDENCIES__={},__IDS_TO_FRAMEWORKS__={},BasicUsage=(__webpack_exports__.default={parameters:Object(defineProperty.a)({storySource:{source:"\n\n// @ts-nocheck\n// @ts-ignore\nvar withSourceLoader = require('@storybook/source-loader/preview').withSource;\n// @ts-ignore\nvar addSourceDecorator = require(\"@storybook/source-loader/preview\").addSource;\n// @ts-ignore\nvar __SOURCE_PREFIX__ = \"/home/travis/build/openscript/react-dsv-import/src\";\n// @ts-ignore\nvar __STORY__ = \"import React, { useState } from 'react';\\nimport { DSVImport, ColumnsType } from './';\\nimport { action } from '@storybook/addon-actions';\\n\\nexport default { title: 'Usage' };\\n\\ntype BasicType = { forename: string; surname: string; email: string };\\n\\nexport const BasicUsage = () => {\\n  const columns: ColumnsType<BasicType> = [\\n    { key: 'forename', label: 'Forename' },\\n    { key: 'surname', label: 'Surname' },\\n    { key: 'email', label: 'Email' }\\n  ];\\n  const onChangeAction = action('Parsed value has changed');\\n\\n  return (\\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction}>\\n      <DSVImport.TextareaInput />\\n      <DSVImport.TablePreview />\\n    </DSVImport>\\n  );\\n};\\nBasicUsage.story = { name: 'Basic usage' };\\n\\nexport const UsingOnChangeCallback = () => {\\n  const columns: ColumnsType<BasicType> = [\\n    { key: 'forename', label: 'Forename' },\\n    { key: 'surname', label: 'Surname' },\\n    { key: 'email', label: 'Email' }\\n  ];\\n  const onChangeAction = action('Parsed value has changed');\\n  const [state, setState] = useState<BasicType[]>([]);\\n\\n  const handleOnChange = (value: BasicType[]) => {\\n    onChangeAction(value);\\n    setState(value);\\n  };\\n\\n  return (\\n    <>\\n      <DSVImport<BasicType> columns={columns} onChange={handleOnChange}>\\n        <DSVImport.TextareaInput />\\n        <DSVImport.TablePreview />\\n      </DSVImport>\\n      <h2>Current state as JSON:</h2>\\n      {JSON.stringify(state)}\\n    </>\\n  );\\n};\\nUsingOnChangeCallback.story = { name: 'Using on change callback' };\\n\\nexport const UsingOnValidationCallback = () => {\\n  const columns: ColumnsType<BasicType> = [\\n    { key: 'forename', label: 'Forename' },\\n    { key: 'surname', label: 'Surname' },\\n    { key: 'email', label: 'Email', rules: [{ constraint: { unique: true }, message: 'Duplicates are not allowed' }] }\\n  ];\\n  const onChangeAction = action('Parsed value has changed');\\n  const onValidationAction = action('Validation value has changed');\\n\\n  return (\\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction} onValidation={onValidationAction}>\\n      <DSVImport.TextareaInput />\\n      <DSVImport.TablePreview />\\n    </DSVImport>\\n  );\\n};\\nUsingOnValidationCallback.story = { name: 'Using on validation callback' };\\n\";\n// @ts-ignore\nvar __ADDS_MAP__ = {\"usage--basic-usage\":{\"startLoc\":{\"col\":26,\"line\":9},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":26,\"line\":9},\"endBody\":{\"col\":1,\"line\":23}},\"usage--using-on-change-callback\":{\"startLoc\":{\"col\":37,\"line\":26},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":37,\"line\":26},\"endBody\":{\"col\":1,\"line\":50}},\"usage--using-on-validation-callback\":{\"startLoc\":{\"col\":41,\"line\":53},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":41,\"line\":53},\"endBody\":{\"col\":1,\"line\":68}}};\n// @ts-ignore\nvar __MAIN_FILE_LOCATION__ = \"/DSVImport.stories.tsx\";\n// @ts-ignore\nvar __MODULE_DEPENDENCIES__ = [];\n// @ts-ignore\nvar __LOCAL_DEPENDENCIES__ = {};\n// @ts-ignore\nvar __IDS_TO_FRAMEWORKS__ = {};\n        \nimport React, { useState } from 'react';\nimport { DSVImport, ColumnsType } from './';\nimport { action } from '@storybook/addon-actions';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useState } from 'react';\\nimport { DSVImport, ColumnsType } from './';\\nimport { action } from '@storybook/addon-actions';\\n\\nexport default { title: 'Usage' };\\n\\ntype BasicType = { forename: string; surname: string; email: string };\\n\\nexport const BasicUsage = () => {\\n  const columns: ColumnsType<BasicType> = [\\n    { key: 'forename', label: 'Forename' },\\n    { key: 'surname', label: 'Surname' },\\n    { key: 'email', label: 'Email' }\\n  ];\\n  const onChangeAction = action('Parsed value has changed');\\n\\n  return (\\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction}>\\n      <DSVImport.TextareaInput />\\n      <DSVImport.TablePreview />\\n    </DSVImport>\\n  );\\n};\\nBasicUsage.story = { name: 'Basic usage' };\\n\\nexport const UsingOnChangeCallback = () => {\\n  const columns: ColumnsType<BasicType> = [\\n    { key: 'forename', label: 'Forename' },\\n    { key: 'surname', label: 'Surname' },\\n    { key: 'email', label: 'Email' }\\n  ];\\n  const onChangeAction = action('Parsed value has changed');\\n  const [state, setState] = useState<BasicType[]>([]);\\n\\n  const handleOnChange = (value: BasicType[]) => {\\n    onChangeAction(value);\\n    setState(value);\\n  };\\n\\n  return (\\n    <>\\n      <DSVImport<BasicType> columns={columns} onChange={handleOnChange}>\\n        <DSVImport.TextareaInput />\\n        <DSVImport.TablePreview />\\n      </DSVImport>\\n      <h2>Current state as JSON:</h2>\\n      {JSON.stringify(state)}\\n    </>\\n  );\\n};\\nUsingOnChangeCallback.story = { name: 'Using on change callback' };\\n\\nexport const UsingOnValidationCallback = () => {\\n  const columns: ColumnsType<BasicType> = [\\n    { key: 'forename', label: 'Forename' },\\n    { key: 'surname', label: 'Surname' },\\n    { key: 'email', label: 'Email', rules: [{ constraint: { unique: true }, message: 'Duplicates are not allowed' }] }\\n  ];\\n  const onChangeAction = action('Parsed value has changed');\\n  const onValidationAction = action('Validation value has changed');\\n\\n  return (\\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction} onValidation={onValidationAction}>\\n      <DSVImport.TextareaInput />\\n      <DSVImport.TablePreview />\\n    </DSVImport>\\n  );\\n};\\nUsingOnValidationCallback.story = { name: 'Using on validation callback' };\\n\",\"locationsMap\":{\"usage--basic-usage\":{\"startLoc\":{\"col\":26,\"line\":9},\"endLoc\":{\"col\":1,\"line\":23},\"startBody\":{\"col\":26,\"line\":9},\"endBody\":{\"col\":1,\"line\":23}},\"usage--using-on-change-callback\":{\"startLoc\":{\"col\":37,\"line\":26},\"endLoc\":{\"col\":1,\"line\":50},\"startBody\":{\"col\":37,\"line\":26},\"endBody\":{\"col\":1,\"line\":50}},\"usage--using-on-validation-callback\":{\"startLoc\":{\"col\":41,\"line\":53},\"endLoc\":{\"col\":1,\"line\":68},\"startBody\":{\"col\":41,\"line\":53},\"endBody\":{\"col\":1,\"line\":68}}}},}, title: 'Usage' };\n\ntype BasicType = { forename: string; surname: string; email: string };\n\nexport const BasicUsage = addSourceDecorator(() => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email' }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n\n  return (\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction}>\n      <DSVImport.TextareaInput />\n      <DSVImport.TablePreview />\n    </DSVImport>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\nBasicUsage.story = { name: 'Basic usage' };\n\nexport const UsingOnChangeCallback = addSourceDecorator(() => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email' }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n  const [state, setState] = useState<BasicType[]>([]);\n\n  const handleOnChange = (value: BasicType[]) => {\n    onChangeAction(value);\n    setState(value);\n  };\n\n  return (\n    <>\n      <DSVImport<BasicType> columns={columns} onChange={handleOnChange}>\n        <DSVImport.TextareaInput />\n        <DSVImport.TablePreview />\n      </DSVImport>\n      <h2>Current state as JSON:</h2>\n      {JSON.stringify(state)}\n    </>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});;\nUsingOnChangeCallback.story = { name: 'Using on change callback' };\n\nexport const UsingOnValidationCallback = addSourceDecorator(() => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email', rules: [{ constraint: { unique: true }, message: 'Duplicates are not allowed' }] }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n  const onValidationAction = action('Validation value has changed');\n\n  return (\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction} onValidation={onValidationAction}>\n      <DSVImport.TextareaInput />\n      <DSVImport.TablePreview />\n    </DSVImport>\n  );\n}, {__STORY__, __ADDS_MAP__,__MAIN_FILE_LOCATION__,__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__});\nUsingOnValidationCallback.story = { name: 'Using on validation callback' };\n",locationsMap:{"usage--basic-usage":{startLoc:{col:26,line:31},endLoc:{col:139,line:45},startBody:{col:26,line:31},endBody:{col:139,line:45}},"usage--using-on-change-callback":{startLoc:{col:37,line:48},endLoc:{col:139,line:72},startBody:{col:37,line:48},endBody:{col:139,line:72}},"usage--using-on-validation-callback":{startLoc:{col:41,line:75},endLoc:{col:139,line:90},startBody:{col:41,line:75},endBody:{col:139,line:90}}}}},"storySource",{source:"import React, { useState } from 'react';\nimport { DSVImport, ColumnsType } from './';\nimport { action } from '@storybook/addon-actions';\n\nexport default { title: 'Usage' };\n\ntype BasicType = { forename: string; surname: string; email: string };\n\nexport const BasicUsage = () => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email' }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n\n  return (\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction}>\n      <DSVImport.TextareaInput />\n      <DSVImport.TablePreview />\n    </DSVImport>\n  );\n};\nBasicUsage.story = { name: 'Basic usage' };\n\nexport const UsingOnChangeCallback = () => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email' }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n  const [state, setState] = useState<BasicType[]>([]);\n\n  const handleOnChange = (value: BasicType[]) => {\n    onChangeAction(value);\n    setState(value);\n  };\n\n  return (\n    <>\n      <DSVImport<BasicType> columns={columns} onChange={handleOnChange}>\n        <DSVImport.TextareaInput />\n        <DSVImport.TablePreview />\n      </DSVImport>\n      <h2>Current state as JSON:</h2>\n      {JSON.stringify(state)}\n    </>\n  );\n};\nUsingOnChangeCallback.story = { name: 'Using on change callback' };\n\nexport const UsingOnValidationCallback = () => {\n  const columns: ColumnsType<BasicType> = [\n    { key: 'forename', label: 'Forename' },\n    { key: 'surname', label: 'Surname' },\n    { key: 'email', label: 'Email', rules: [{ constraint: { unique: true }, message: 'Duplicates are not allowed' }] }\n  ];\n  const onChangeAction = action('Parsed value has changed');\n  const onValidationAction = action('Validation value has changed');\n\n  return (\n    <DSVImport<BasicType> columns={columns} onChange={onChangeAction} onValidation={onValidationAction}>\n      <DSVImport.TextareaInput />\n      <DSVImport.TablePreview />\n    </DSVImport>\n  );\n};\nUsingOnValidationCallback.story = { name: 'Using on validation callback' };\n",locationsMap:{"usage--basic-usage":{startLoc:{col:26,line:9},endLoc:{col:1,line:23},startBody:{col:26,line:9},endBody:{col:1,line:23}},"usage--using-on-change-callback":{startLoc:{col:37,line:26},endLoc:{col:1,line:50},startBody:{col:37,line:26},endBody:{col:1,line:50}},"usage--using-on-validation-callback":{startLoc:{col:41,line:53},endLoc:{col:1,line:68},startBody:{col:41,line:53},endBody:{col:1,line:68}}}}),title:"Usage"},addSourceDecorator(addSourceDecorator((function(){var onChangeAction=Object(dist.action)("Parsed value has changed");return react_default.a.createElement(src_DSVImport,{columns:[{key:"forename",label:"Forename"},{key:"surname",label:"Surname"},{key:"email",label:"Email"}],onChange:onChangeAction},react_default.a.createElement(src_DSVImport.TextareaInput,null),react_default.a.createElement(src_DSVImport.TablePreview,null))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/DSVImport.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/DSVImport.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}));BasicUsage.story={name:"Basic usage"};var UsingOnChangeCallback=addSourceDecorator(addSourceDecorator((function(){var onChangeAction=Object(dist.action)("Parsed value has changed"),_useState=Object(react.useState)([]),_useState2=Object(slicedToArray.a)(_useState,2),state=_useState2[0],setState=_useState2[1];return react_default.a.createElement(react_default.a.Fragment,null,react_default.a.createElement(src_DSVImport,{columns:[{key:"forename",label:"Forename"},{key:"surname",label:"Surname"},{key:"email",label:"Email"}],onChange:function(value){onChangeAction(value),setState(value)}},react_default.a.createElement(src_DSVImport.TextareaInput,null),react_default.a.createElement(src_DSVImport.TablePreview,null)),react_default.a.createElement("h2",null,"Current state as JSON:"),JSON.stringify(state))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/DSVImport.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/DSVImport.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});UsingOnChangeCallback.story={name:"Using on change callback"};var UsingOnValidationCallback=addSourceDecorator(addSourceDecorator((function(){var onChangeAction=Object(dist.action)("Parsed value has changed"),onValidationAction=Object(dist.action)("Validation value has changed");return react_default.a.createElement(src_DSVImport,{columns:[{key:"forename",label:"Forename"},{key:"surname",label:"Surname"},{key:"email",label:"Email",rules:[{constraint:{unique:!0},message:"Duplicates are not allowed"}]}],onChange:onChangeAction,onValidation:onValidationAction},react_default.a.createElement(src_DSVImport.TextareaInput,null),react_default.a.createElement(src_DSVImport.TablePreview,null))}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/DSVImport.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__}),{__STORY__:__STORY__,__ADDS_MAP__:__ADDS_MAP__,__MAIN_FILE_LOCATION__:"/DSVImport.stories.tsx",__MODULE_DEPENDENCIES__:__MODULE_DEPENDENCIES__,__LOCAL_DEPENDENCIES__:__LOCAL_DEPENDENCIES__,__SOURCE_PREFIX__:__SOURCE_PREFIX__,__IDS_TO_FRAMEWORKS__:__IDS_TO_FRAMEWORKS__});UsingOnValidationCallback.story={name:"Using on validation callback"}},1293:function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"__page",(function(){return __page}));__webpack_require__(1),__webpack_require__(42),__webpack_require__(29),__webpack_require__(11),__webpack_require__(3),__webpack_require__(71),__webpack_require__(43),__webpack_require__(1271),__webpack_require__(1272),__webpack_require__(5),__webpack_require__(33),__webpack_require__(0);var esm=__webpack_require__(75),blocks=__webpack_require__(114);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var source,i=1;i<arguments.length;i++)source=null!=arguments[i]?arguments[i]:{},i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}));return target}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _extends(){return(_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i])Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target}).apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],0<=excluded.indexOf(key)||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],0<=excluded.indexOf(key)||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={},_ref2=Object(esm.mdx)(blocks.Meta,{title:"Start",mdxType:"Meta"}),_ref3=Object(esm.mdx)(blocks.Description,{markdown:"# react-dsv-import\nFlexible, typed and easy to use React Component ⚛ to provide CSV, TSV and other delimiter-separated values formats ([DSV](https://en.wikipedia.org/wiki/Delimiter-separated_values)) import functionality.\n\n[![Travis (.com)](https://img.shields.io/travis/com/openscript/react-dsv-import)](https://travis-ci.com/github/openscript/react-dsv-import)\n[![npm](https://img.shields.io/npm/v/react-dsv-import)](https://www.npmjs.com/package/react-dsv-import)\n[![npm peer dependency version](https://img.shields.io/npm/dependency-version/react-dsv-import/peer/react)](https://www.npmjs.com/package/react)\n[![GitHub](https://img.shields.io/github/license/openscript/react-dsv-import)](https://github.com/openscript/react-dsv-import)\n[![Maintainability](https://api.codeclimate.com/v1/badges/f05b123887e046758a96/maintainability)](https://codeclimate.com/github/openscript/react-dsv-import/maintainability)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/f05b123887e046758a96/test_coverage)](https://codeclimate.com/github/openscript/react-dsv-import/test_coverage)\n\n![Demonstration](./docs/demo.apng)\n\n## Getting started\nAdd the package with the package manager of choice to your project:\n\n - **yarn**: `yarn add react-dsv-import`\n - **npm**: `npm install react-dsv-import`\n - **npx**: `npx -p react-dsv-import`\n\n### TypeScript\n```\nimport { DSVImport, ColumnsType } from 'react-dsv-import';\n\ntype BasicType = { forename: string; surname: string; email: string };\n\nconst columns: ColumnsType<BasicType> = [\n  { key: 'forename', label: 'Forename' },\n  { key: 'surname', label: 'Surname' },\n  { key: 'email', label: 'Email' }\n];\n\n<DSVImport<BasicType> columns={columns}>\n  <DSVImport.TextareaInput />\n  <DSVImport.TablePreview />\n</DSVImport>\n```\n\n### JavaScript\n```\nimport { DSVImport } from 'react-dsv-import';\n\nconst columns = [\n  { key: 'forename', label: 'Forename' },\n  { key: 'surname', label: 'Surname' },\n  { key: 'email', label: 'Email' }\n];\n\n<DSVImport columns={columns}>\n  <DSVImport.TextareaInput />\n  <DSVImport.TablePreview />\n</DSVImport>\n```\n\n## Project\nThis section describes the status of the project.\n\n### Features\nThe most important features of this component are:\n\n - ✅ Type definitions and type safety\n - ✅ DSV format detection\n - ✅ Fully compositable\n - ✅ Automatic testing with >90% coverage\n - ✅ Input validation\n - ❌ [Material UI](https://material-ui.com/) integration\n - ❌ [ant.design](https://ant.design/) integration\n\n✅ means the feature is implemented and released. ❌ indicates that a feature is planned.\n\n### Links\n - [Code repository](https://github.com/openscript/react-dsv-import)\n - [Build status](https://travis-ci.com/github/openscript/react-dsv-import)\n - [Documenation and examples](https://openscript.github.io/react-dsv-import)\n - [Package publication](https://www.npmjs.com/package/react-dsv-import)\n - [Code quality evaluation](https://codeclimate.com/github/openscript/react-dsv-import)\n\n## Tools\n - [yarn](https://yarnpkg.com/)\n - [rollup.js](https://rollupjs.org/)\n - [TypeScript](https://www.typescriptlang.org/)\n   - [TypeScript ESLint](https://typescript-eslint.io/)\n - [React](https://reactjs.org/)\n - [Storybook](https://storybook.js.org/)\n   - [Addon: Docs](https://github.com/storybookjs/storybook/tree/master/addons/docs)\n   - [Addon: Source](https://github.com/storybookjs/storybook/tree/master/addons/storysource)\n   - [Addon: Actions](https://github.com/storybookjs/storybook/tree/master/addons/actions)\n  - [Travis CI](https://travis-ci.com)\n\n## Resources\n - [Article: Using ESLint and Prettier in a TypeScript Project](https://www.robertcooper.me/using-eslint-and-prettier-in-a-typescript-project)\n - [Template: Rollup Starter Lib (TypeScript)](https://github.com/rollup/rollup-starter-lib/tree/typescript)\n - [Article: Creating a React Component library using Rollup, Typescript, Sass and Storybook](https://blog.harveydelaney.com/creating-your-own-react-component-library/) <br> Explains how to create a React component library using Rollup\n",mdxType:"Description"});function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,["components"]);return Object(esm.mdx)("wrapper",_extends({},layoutProps,props,{components:components,mdxType:"MDXLayout"}),_ref2,_ref3)}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function(){throw new Error("Docs-only story")};__page.story={parameters:{docsOnly:!0}};var componentMeta={title:"Start",includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{};var _ref4=Object(esm.mdx)(blocks.AddContext,{mdxStoryNameToKey:{},mdxComponentMeta:componentMeta},Object(esm.mdx)(MDXContent,null));componentMeta.parameters.docs=_objectSpread(_objectSpread({},componentMeta.parameters.docs||{}),{},{page:function page(){return _ref4}});__webpack_exports__.default=componentMeta},435:function(module,exports){},452:function(module,exports,__webpack_require__){__webpack_require__(453),__webpack_require__(595),__webpack_require__(596),__webpack_require__(1245),module.exports=__webpack_require__(1246)},515:function(module,exports){}},[[452,1,2]]]);
//# sourceMappingURL=main.fd8f339e3ee25f17feb3.bundle.js.map